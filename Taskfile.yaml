# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

tasks:
  default:
    silent: true
    desc: "List all tasks"
    cmds:
      - "{{.TASK_EXE}} --list-all"

  check:
    desc: "Check the code"
    cmds:
      - nix flake check

  build:
    desc: "Build the code"
    cmds:
      - >-
        nix-fast-build --attic-cache default --skip-cached --no-download
        --no-nom -j 4 --eval-workers 4 --flake .#checks.x86_64-linux

  fmt:
    desc: "Format the code"
    cmds:
      - nix fmt -- --no-cache

  deploy-local:
    desc: "Deploy to the current node (identified by hostname)"
    cmds:
      - nixos-rebuild switch --flake ".#$(hostname)" --use-remote-sudo

  deploy:
    desc: "Deploy to the a node (identified by `NODE` variable)"
    cmds:
      - deploy --skip-checks --auto-rollback false ".#{{.NODE}}" -- --print-build-logs
    requires:
      vars: [NODE]

  diff:
    cmds:
      - deploy --skip-checks --fast-connection true ".#{{.NODE}}" --dry-activate -- --print-build-logs
      - >-
        uv run scripts/ssh.py --node={{.NODE}}
        nix run --extra-experimental-features '"nix-command flakes"'
        nixpkgs#nvd -- --color always diff /run/current-system
        "$(nix build .#nixosConfigurations.{{.NODE}}.config.system.build.toplevel --print-out-paths)"
    requires:
      vars: [NODE]

  infect:
    desc: "Infect the node with nixos-anywhere"
    cmds:
      - uv run scripts/infect.py --node={{.NODE}} {{.CLI_ARGS}}
    requires:
      vars: [NODE]

  keyscan:
    desc: "Scan the SSH keys of the node"
    cmds:
      - uv run scripts/keyscan.py --node={{.NODE}} {{.CLI_ARGS}} --output=lib/data/keyscan.{{.NODE}}.json
      - yq -P -o yaml lib/data/keyscan.{{.NODE}}.json
    requires:
      vars: [NODE]

  ssh:
    desc: "SSH into the node"
    cmds:
      - uv run scripts/ssh.py --node={{.NODE}} {{.CLI_ARGS}}
    requires:
      vars: [NODE]

  docs:serve:
    desc: "Serve the documentation locally"
    cmds:
      - >-
        nix shell --impure --expr
        'with import (builtins.getFlake "nixpkgs") {};
        pkgs.python3.withPackages (ps: with ps; [ mkdocs mkdocs-material ])'
        -c mkdocs serve

  tf:apply:
    desc: "Apply the Terraform configuration"
    dir: "terraform/{{.MODULE}}"
    cmds:
      - terragrunt apply
    requires:
      vars: [MODULE]

  secrets:edit:
    desc: "Edit the secrets in the sources"
    cmds:
      - sops edit secrets/sources/{{.SOURCE}}.yaml
    requires:
      vars: [SOURCE]

  secrets:encrypt:
    desc: "Encrypt the secrets in the sources"
    cmds:
      - sops encrypt --in-place secrets/sources/{{.SOURCE}}.yaml
    requires:
      vars: [SOURCE]

  secrets:sync:
    desc: "Sync the secrets from sources to nodes"
    cmds:
      - uv run scripts/secrets.py sync --node={{.NODE}} {{.CLI_ARGS}}
    requires:
      vars: [NODE]

  aws:login:
    desc: "Login to the AWS account"
    cmds:
      - aws sso login
