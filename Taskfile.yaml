# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

tasks:
  default:
    silent: true
    desc: "List all tasks"
    cmds:
      - "{{.TASK_EXE}} --list-all"

  check:
    desc: "Check the code"
    cmds:
      - nix flake check

  fmt:
    desc: "Format the code"
    cmds:
      - nix fmt -- --no-cache

  deploy-local:
    desc: "Deploy to the current node (identified by hostname)"
    cmds:
      - nixos-rebuild switch --flake ".#$(hostname)" --use-remote-sudo

  deploy:
    desc: "Deploy to the a node (identified by `NODE` variable)"
    cmds:
      - deploy --skip-checks ".#{{.NODE}}"
    requires:
      vars: [NODE]

  infect:
    desc: "Infect the node with nixos-anywhere"
    cmds:
      - uv run scripts/infect.py --node={{.NODE}} {{.CLI_ARGS}}
    requires:
      vars: [NODE]

  ssh:
    desc: "SSH into the node"
    cmds:
      - uv run scripts/ssh.py --node={{.NODE}} {{.CLI_ARGS}}
    requires:
      vars: [NODE]

  docs:serve:
    desc: "Serve the documentation locally"
    cmds:
      - >-
        nix shell --impure --expr
        'with import (builtins.getFlake "nixpkgs") {};
        pkgs.python3.withPackages (ps: with ps; [ mkdocs mkdocs-material ])'
        -c mkdocs serve

  tf:apply:
    desc: "Apply the Terraform configuration"
    dir: "terraform/{{.MODULE}}"
    cmds:
      - terragrunt apply
    env:
      ALICLOUD_PROFILE: default
      AWS_DEFAULT_PROFILE: admin
    requires:
      vars: [MODULE]
