# NOTE: THIS PROFILE IS OBSOLETE.
# TODO:
# - [ ] BUG: Resolve `external-ip` for Coturn
# - [ ] Enable authorization code flow with PKCE
# - [ ] Persist /var/lib/netbird-mgmt
# - [ ] Patch NetBird CIDR range
# - [ ] Test self-hosted NetBird relay
{
  config,
  lib,
  utils,
  ...
}:
let
  netbirdClientId = "CHANGE_ME";
  netbirdAudience = "CHANGE_ME";
in
{
  ## ---------------------------------------------------------------------------
  ## CONFIGURATION
  ## ---------------------------------------------------------------------------
  services.netbird.server = {
    enable = true;
    domain = config.domains.netbird;
    enableNginx = true;

    dashboard.settings = {
      AUTH_AUTHORITY = "https://${config.domains.zitadel}";
      AUTH_CLIENT_ID = netbirdClientId;
      AUTH_AUDIENCE = "";
      AUTH_REDIRECT_URI = "/#callback";
      AUTH_SILENT_REDIRECT_URI = "/#silent-callback";
      NETBIRD_DRAG_QUERY_PARAMS = false;
      NETBIRD_HOTJAR_TRACK_ID = "";
      NETBIRD_GOOGLE_ANALYTICS_ID = "";
    };

    coturn = {
      enable = true;
      passwordFile = config.sops.secrets."netbird/coturnPassword".path;
      openPorts = with config.services.coturn; [
        listening-port
        tls-listening-port
      ];
    };

    signal.port = config.ports.netbird-signal;

    management = {
      port = config.ports.netbird-management;
      dnsDomain = config.domains.netbird-overlay;
      oidcConfigEndpoint = "https://${config.domains.zitadel}/.well-known/openid-configuration";
      extraOptions = [
        "--metrics-port"
        (toString config.ports.netbird-management-metrics)
      ];

      settings = {
        DataStoreEncryptionKey = {
          _secret = config.sops.secrets."netbird/dataStoreEncryptionKey".path;
        };
        TURNConfig = {
          Secret = {
            _secret = config.sops.secrets."netbird/turnSecret".path;
          };
        };
        DeviceAuthorizationFlow = {
          Provider = "hosted";
          ProviderConfig = {
            Audience = netbirdAudience;
            ClientID = netbirdClientId;
            UseIDToken = true;
          };
        };
        HttpConfig = {
          AuthAudience = netbirdAudience;
          AuthUserIDClaim = "email";
        };
        PKCEAuthorizationFlow = null;
        IdpManagerConfig = null;
      };
    };
  };

  ## ---------------------------------------------------------------------------
  ## SECRETS
  ## ---------------------------------------------------------------------------
  sops.secrets."netbird/coturnPassword" = {
    owner = "turnserver";
    group = "turnserver";
  };
  # generated by `openssl rand -base64 32`
  sops.secrets."netbird/dataStoreEncryptionKey" = { };
  sops.secrets."netbird/turnSecret" = { };

  ## ---------------------------------------------------------------------------
  ## INGRESS
  ## ---------------------------------------------------------------------------
  services.nginx.virtualHosts.${config.domains.netbird} = {
    forceSSL = true;
    enableACME = true;
  };
  warnings = lib.optionals (!config.services.nginx.enable) [
    "Nginx service is not enabled, NetBird will not be accessible"
  ];

  ## ---------------------------------------------------------------------------
  ## HACKS
  ## ---------------------------------------------------------------------------
  systemd.services.netbird-signal =
    let
      cfg = config.services.netbird.server.signal;
    in
    {
      serviceConfig.ExecStart = lib.mkForce (
        utils.escapeSystemdExecArgs [
          (lib.getExe' cfg.package "netbird-signal")
          "run"
          "--port"
          cfg.port
          "--log-file"
          "console"
          "--log-level"
          cfg.logLevel
          # To avoid port collisions
          "--metrics-port"
          config.ports.netbird-signal-metrics
        ]
      );
    };
  services.coturn = {
    cert = "/run/credentials/coturn.service/cert.pem";
    pkey = "/run/credentials/coturn.service/pkey.pem";
    listening-ips = [
      "0.0.0.0"
      "::"
    ];
    # FIXME: Without a correct `external-ip`, coturn cannot work as a relay server.
    extraConfig = ''
      no-rfc5780
      external-ip=127.0.0.1
    '';
  };
  systemd.services.coturn =
    let
      dir = config.security.acme.certs.${config.domains.netbird}.directory;
    in
    {
      serviceConfig.LoadCredential = [
        "cert.pem:${dir}/fullchain.pem"
        "pkey.pem:${dir}/key.pem"
      ];
    };
}
